syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/timestamp.proto";

message SensorEventProto {
  string id = 1; // идентификатор датчика
  google.protobuf.Timestamp timestamp = 2; // таймстемп события
  string hubId = 3; // идентификатор связанного хаба
    oneof payload {// данные события от конкретного устройства
    MotionSensorEvent motion_sensor_event = 4;            // данные события датчика движения
    TemperatureSensorEvent temperature_sensor_event = 5;  // данные события температурного датчика
    LightSensorEvent light_sensor_event = 6;              // данные события датчика освещённости
    ClimateSensorEvent climate_sensor_event = 7;          // данные события климатического датчика
    SwitchSensorEvent switch_sensor_event = 8;            // данные события датчика-переключателя
  }
}

message MotionSensorEvent {
  int32 link_quality = 1; // показатель качества связи; чем выше значение, тем лучше качество связи
  bool motion = 2;        // указание на наличие движения или чьего-то присутствия
  int32 voltage = 3;      // значение напряжения, которое может использоваться для оценки текущего напряжения в сенсоре или связанном устройстве
}

message TemperatureSensorEvent {
  int32 temperature_c = 1; // уровень температуры по шкале Цельсия
  int32 temperature_f = 2; // уровень температуры по Фаренгейту
}

message LightSensorEvent {
  int32 link_quality = 1; // уровень сигнала
  int32 luminosity = 2;   // уровень освещённости
}

message ClimateSensorEvent {
  int32 temperature_c = 1;  // уровень температуры по шкале Цельсия
  int32 humidity = 2;       // влажность
  int32 co2_level = 3;      // уровень CO2
}


message SwitchSensorEvent {
  bool state = 1; // состояние переключателя: включён/выключен
}

message HubEventProto {
  string hub_id = 1; // идентификатор хаба
  google.protobuf.Timestamp timestamp = 2; // таймстемп события
  oneof payload {// содержимое конкретного события
    DeviceAddedEventProto device_added = 3;      // данные события добавления устройства
    DeviceRemovedEventProto device_removed = 4;  // данные события удаления устройства
    ScenarioAddedEventProto scenario_added = 5;      // данные события добавления нового сценария
    ScenarioRemovedEventProto scenario_removed = 6;  // данные события удаления сценария
  }
}

// события (де)регистрации устройств
enum DeviceTypeProto {
  MOTION_SENSOR = 0;      // датчик движения
  TEMPERATURE_SENSOR = 1; // датчик температуры
  LIGHT_SENSOR = 2;       // датчик освещённости
  CLIMATE_SENSOR = 3;     // датчик контроля климата
  SWITCH_SENSOR = 4;      // переключатель
}

message DeviceAddedEventProto {
  string id = 1;        // идентификатор устройства
  DeviceTypeProto type = 2; // тип устройства
}

message DeviceRemovedEventProto {
  string id = 1;        // идентификатор устройства
}

// события создания/удаления сценариев
enum ConditionTypeProto {
  MOTION = 0;
  LUMINOSITY = 1;
  SWITCH = 2;
  TEMPERATURE = 3;
  CO2LEVEL = 4;
  HUMIDITY = 5;
}

enum ConditionOperationProto {
  EQUALS = 0;
  GREATER_THAN = 1;
  LOWER_THAN = 2;
}

message ScenarioConditionProto {
  string sensor_id = 1;
  ConditionTypeProto type = 2;
  ConditionOperationProto operation = 3;
  oneof value {
    bool bool_value = 4;
    int32 int_value = 5;
  }
}

enum ActionTypeProto {
  ACTIVATE = 0;
  DEACTIVATE = 1;
  INVERSE = 2;
  SET_VALUE = 3;
}

message DeviceActionProto {
  string sensor_id = 1; // идентификатор устройства
  ActionTypeProto type = 2;
  optional int32 value = 3;
}

message ScenarioAddedEventProto {
  string name = 1; // название сценария, уникальное в рамках хаба
  repeated ScenarioConditionProto condition = 2; // набор условий активации сценария
  repeated DeviceActionProto action = 3; // набор действий при активации сценария
}

message ScenarioRemovedEventProto {
  string name = 1; // название сценария, уникальное в рамках хаба
}

service CollectorController {
  rpc CollectSensorEvent (SensorEventProto)
          returns (google.protobuf.Empty);

  rpc CollectHubEvent (HubEventProto)
          returns (google.protobuf.Empty);
}